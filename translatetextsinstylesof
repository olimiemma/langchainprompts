#!pip install python-dotenv
#!pip install openai

import os
import openai

from dotenv import load_dotenv, find_dotenv
_ = load_dotenv(find_dotenv()) # read local .env file
openai.api_key = os.environ['OPENAI_API_KEY']

def get_completion(prompt, model="gpt-3.5-turbo"):
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0, 
    )
    return response.choices[0].message["content"]


get_completion("What is 1+1?")

customer_email = """
Before we know it, tech giants like Google, Microsoft, 
or OpenAI announce yet another groundbreaking innovation that promises to reshape our reality. It's enough to make you want to pull your hair out, or in my case,
 whatever little is left of it. But fret not, my friends, confusion seems to be a common thread.
"""


style = """Austrian English \
in a enthusiastic  and happy tone
"""


prompt = f"""Translate the text \
that is delimited by triple backticks 
into a style that is {style}.
text: ```{customer_email}```
"""

print(prompt)


response = get_completion(prompt)

response

#!pip install --upgrade langchain

from langchain.chat_models import ChatOpenAI

# To control the randomness and creativity of the generated
# text by an LLM, use temperature = 0.0
chat = ChatOpenAI(temperature=0.0)
chat

template_string = """Translate the text \
that is delimited by triple backticks \
into a style that is {style}. \
text: ```{text}```
"""

from langchain.prompts import ChatPromptTemplate

prompt_template = ChatPromptTemplate.from_template(template_string)

prompt_template.messages[0].prompt

prompt_template.messages[0].prompt.input_variables

customer_style = """American English \
in a calm and respectful tone
"""

customer_email = """
ChatGPT prompt generator, I will send a topic, 
you have to generate a ChatGPT prompt based on the content of the topic, 
the prompt should start with "I want you to act as ", and guess what I might do, 
and expand the prompt accordingly Describe the content to make it useful
"""

customer_messages = prompt_template.format_messages(
                    style=customer_style,
                    text=customer_email)

print(type(customer_messages))
print(type(customer_messages[0]))

print(customer_messages[0])
